<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <title>Intro to FeatureLayer | Sample | ArcGIS Maps SDK for JavaScript 4.28</title>

    <link rel="stylesheet" href="https://js.arcgis.com/4.28/esri/themes/light/main.css" />
    <script src="https://js.arcgis.com/4.28/"></script>

    <style>
      html,
      body,
      #viewDiv {
        padding: 0;
        margin: 0;
        height: 100%;
        width: 100%;
      }
      #languageLayerToggle {
        bottom: 20px;
        left: 10px;
        position: absolute;
        z-index: 99;
        background-color: white;
        border-radius: 8px;
        padding: 10px;
        opacity: 0.75;
      }
    </style>

    <script>
      require([
        "esri/Map",
        "esri/PopupTemplate",
        "esri/views/MapView",
        "esri/views/draw/Draw",
        "esri/layers/FeatureLayer",
        "esri/Graphic",
        "esri/Color",
        "esri/geometry/Point",
        "esri/geometry/geometryEngine",
        "esri/widgets/Expand",
        "esri/widgets/Legend",
        "esri/widgets/Print",
        ], (
          Map,
          PopupTemplate,
          MapView,
          Draw,
          FeatureLayer,
          Graphic,
          Color,
          Point,
          geometryEngine,
          Expand,
          Legend,
          Print
          ) => {
        
        const defaultSym = {
          type: "simple-fill",
          outline: {
            color: [128, 128, 128, 0.2],
            width: "0.5px"
          }
        };

        var languageStat = "STAT_06_LT"
        var languagePick = "lietuvių k."
        var legendTitle = `% žmonių, kurių gimtoji kalba yra ${languagePick}`
        var popupContent = `{${languageStat}} iš {STAT_01_VISO} žmonių kalba ${languagePick} kaip gimtąja kalba`

        const renderer = {
          type: "simple",
          symbol: defaultSym,
          visualVariables: [
            {
              type: "color",
              field: languageStat,
              normalizationField: "STAT_01_VISO",
              legendOptions: {
                title: legendTitle
              },
              stops: [
                {
                  value: 0.1,
                  color: "#FFFCD4",
                  label: "<10%"
                },
                {
                  value: 0.5,
                  color: "#350242",
                  label: ">50%"
                }
              ]
            }
          ]
        };

        const featureLayer = new FeatureLayer({
          url: "https://services.arcgis.com/fFwZ4t9mPyCe14FA/arcgis/rest/services/HBContent_DMGRFA_G1KM/FeatureServer",
          renderer: renderer,
          popupTemplate: {
            title: "Gimtosios kalbos statistika",
            fieldInfos: [
              {
                fieldName: "STAT_06_LT",
                label: "Žmonių sk., kurių gimtoji kalba yra lietuvių",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_06_RU",
                label: "Žmonių sk., kurių gimtoji kalba yra rusų",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_06_PL",
                label: "Žmonių sk., kurių gimtoji kalba yra lenkų",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_06_KT",
                label: "Žmonių sk., kurių gimtoji kalba yra kita, nei nurodyta",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_07_EN",
                label: "Žmonių sk., kurie moka anglų k.",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_07_RU",
                label: "Žmonių sk., kurie moka rusų k.",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_07_PL",
                label: "Žmonių sk., kurie moka lenkų k.",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_07_KT",
                label: "Žmonių sk., kurie moka kitokią, nei nurodyta, kalbą",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              },
              {
                fieldName: "STAT_01_VISO",
                label: "Žmonių sk. gardelėje",
                format: {
                  digitSeparator: true,
                  places: 0
                }
              }
            ],
            content: [{
              type: "text",
              text: popupContent
              },
              
              {
                type: "media",
                title: "Kalbų duomenys gardelėje {OBJECTID}",
                mediaInfos: [
                  {
                    title: "<b>Gimtakalbių kalbų duomenys</b>",
                    type: "column-chart",
                    caption: "Žmonių skaičius pagal gimtąją kalbą.",
                    value: {
                      fields: ["STAT_06_LT", "STAT_06_RU", "STAT_06_PL", "STAT_06_KT"],
                      colors: [new Color("#598c58"), new Color("#dde8b2"), new Color("#637349"), new Color("#becc97")]
                    }
                  },
              {
                title: "<b>Kalbų žinių duomenys</b>",
                type: "pie-chart",
                caption: "Žmonių skaičius pagal žinomas kalbas.",
                value: {
                  fields: ["STAT_07_EN", "STAT_07_RU", "STAT_07_PL", "STAT_07_KT"]
                }
              }]
              }],
          },
          definitionExpression: "STAT_01_VISO >= 10",
          opacity: 0.75,
          visible: false
        });

        const map = new Map({
          basemap: "topo-vector",
          layers: [featureLayer]
        });

        const view = new MapView({
          container: "viewDiv",
          map: map,
          center: [25.279652, 54.687157],
          zoom: 12,
        });
        
        /*****************************************************************
         * legend and feature map toggles
         *****************************************************************/

        const legend = new Legend({
          view: view,
          layerInfos: [{
            layer: featureLayer,
            title: "Legenda"
          }],
          visible: false
        });

        view.when().then(() => {
          view.ui.add(legend, "bottom-right");
        });
        
        const lithuanianToggle = document.getElementById("lithuanian");
        const russianToggle = document.getElementById("russian");
        const polishToggle = document.getElementById("polish");
        const otherToggle = document.getElementById("other");
        
        const mapToggle = document.getElementById("map");
        const legendToggle = document.getElementById("legend");

        languageLayerToggle.addEventListener("click", () => {
          if(lithuanianToggle.checked) {
            languageStat = "STAT_06_LT";
            languagePick = "lietuvių k.";
          }
          else if(russianToggle.checked) {
            languageStat = "STAT_06_RU";
            languagePick = "rusų k.";
          }
          else if(polishToggle.checked) {
            languageStat = "STAT_06_PL";
            languagePick = "lenkų k.";
          }
          else {
            languageStat = "STAT_06_KT";
            languagePick = "kita, nei nurodyta, kalba";
          }
          
          legendTitle = `% žmonių, kurių gimtoji kalba yra ${languagePick}`
          popupContent = `{${languageStat}} iš {STAT_01_VISO} žmonių kalba ${languagePick} kaip gimtąja kalba`
          
          renderer.visualVariables[0].field = languageStat;
          renderer.visualVariables[0].legendOptions.title = legendTitle;
          featureLayer.renderer = renderer;
          featureLayer.popupTemplate.content[0].text = popupContent;
        });

        mapToggle.addEventListener("change", () => {
          featureLayer.visible = mapToggle.checked;
        });

        legendToggle.addEventListener("change", () => {
          legend.visible = legendToggle.checked;
        });
        
        /*****************************************************************
         * Big city esri icons
         *****************************************************************/
         
         // Vilnius
        const cityPoint1 = new Point({
          longitude: 25.27965,
          latitude: 54.687157
        });
        
        // Kaunas
        const cityPoint2 = new Point({
          longitude: 23.903597,
          latitude: 54.898521
        });
        
        // Klaipeda
        const cityPoint3 = new Point({
          longitude: 21.144279,
          latitude: 55.703297
        });
        
        // Siauliai
        const cityPoint4 = new Point({
          longitude: 23.31667,
          latitude: 55.93333
        });
        
        // Panevezys
        const cityPoint5 = new Point({
          longitude: 24.35,
          latitude: 55.73333
        });
        
        const citySymbol = {
          type: "text",
          color: "#7A003C",
          text: "\ue61d", // esri-icon-map-pin
          font: {
            size: 36,
            family: "CalciteWebCoreIcons"
          }
        };
        
        const cityGraphic1 = new Graphic({
          geometry: cityPoint1,
          symbol: citySymbol
        });
        
        const cityGraphic2 = new Graphic({
          geometry: cityPoint2,
          symbol: citySymbol
        });
        
        const cityGraphic3 = new Graphic({
          geometry: cityPoint3,
          symbol: citySymbol
        });
        
        const cityGraphic4 = new Graphic({
          geometry: cityPoint4,
          symbol: citySymbol
        });
        
        const cityGraphic5 = new Graphic({
          geometry: cityPoint5,
          symbol: citySymbol
        });
        
        view.graphics.addMany([cityGraphic1, cityGraphic2, cityGraphic3, cityGraphic4, cityGraphic5]);
        
        /*****************************************************************
         * Print widget
         *****************************************************************/
         
        const print = new Print({
            view: view,
            printServiceUrl:
              "https://utility.arcgisonline.com/arcgis/rest/services/Utilities/PrintingTools/GPServer/Export%20Web%20Map%20Task"
          });
          
          const printExpand = new Expand({
          view: view,
          content: print
        });
        
          view.ui.add(printExpand, "top-left");
          
        /*****************************************************************
         * Draw non-intersecting polyline
         *****************************************************************/
         
        view.ui.add("line-button", "top-left");
      
        const draw = new Draw({
          view: view
        });
        
        var action = null;
        
        document.getElementById("line-button").onclick = () => {
        view.graphics.removeAll();
        view.graphics.addMany([cityGraphic1, cityGraphic2, cityGraphic3, cityGraphic4, cityGraphic5]);
        
        action = draw.create("polyline");
        
          view.focus();
    
          action.on(
            [
              "vertex-add",
              "vertex-remove",
              "cursor-update",
              "redo",
              "undo",
              "draw-complete"
            ],
            updateVertices
          );
        };
        
        view.on("dbl-click", () => {
          if (action) {
            action.draw-complete
          }
      });
      
      document.addEventListener("keydown", (event) => {
      if (event.key === "q") {
        if(action){
          action.destroy();
          action = null;
        }
        
        view.graphics.removeAll();
        view.graphics.addMany([cityGraphic1, cityGraphic2, cityGraphic3, cityGraphic4, cityGraphic5]);
      }
      });
  
      function updateVertices(event) {
        if (event.vertices.length > 1) {
          const result = createGraphic(event);
          if (result.selfIntersects) {
            event.preventDefault();
          }
        }
      }
  
      function createGraphic(event) {
        const vertices = event.vertices;
        view.graphics.removeAll();
        view.graphics.addMany([cityGraphic1, cityGraphic2, cityGraphic3, cityGraphic4, cityGraphic5]);
        
        const graphic = new Graphic({
          geometry: {
            type: "polyline",
            paths: vertices,
            spatialReference: view.spatialReference
          },
          symbol: {
            type: "simple-line",
            color: [4, 90, 141],
            width: 4,
            cap: "round",
            join: "round"
          }
        });
  
        const intersectingSegment = getIntersectingSegment(graphic.geometry);
  
        if (intersectingSegment) {
          view.graphics.addMany([graphic, intersectingSegment]);
        }

        else {
          view.graphics.add(graphic);
        }
  
        return {
          selfIntersects: intersectingSegment
        };
      }
  
      function isSelfIntersecting(polyline) {
        if (polyline.paths[0].length < 3) {
          return false;
        }
        const line = polyline.clone();
  
        const lastSegment = getLastSegment(polyline);
        line.removePoint(0, line.paths[0].length - 1);
  
        return geometryEngine.crosses(lastSegment, line);
      }
  
      function getIntersectingSegment(polyline) {
        if (isSelfIntersecting(polyline)) {
          return new Graphic({
            geometry: getLastSegment(polyline),
            symbol: {
              type: "simple-line",
              style: "short-dot",
              width: 3.5,
              color: "yellow"
            }
          });
        }
        return null;
      }
  
      function getLastSegment(polyline) {
        const line = polyline.clone();
        const lastXYPoint = line.removePoint(0, line.paths[0].length - 1);
        const existingLineFinalPoint = line.getPoint(
          0,
          line.paths[0].length - 1
        );
  
        return {
          type: "polyline",
          spatialReference: view.spatialReference,
          hasZ: false,
          paths: [
            [
              [existingLineFinalPoint.x, existingLineFinalPoint.y],
              [lastXYPoint.x, lastXYPoint.y]
            ]
          ]
        };
      }
       
      });
    </script>
  </head>

  <body>
    <div id="viewDiv"></div>
    <div>
      <span id="languageLayerToggle" class="esri-widget">
        <input type="radio" id="lithuanian" name="language" checked = "checked" /> LT
        <input type="radio" id="russian" name="language" /> RU
        <input type="radio" id="polish" name="language" /> PL
        <input type="radio" id="other" name="language" /> KITOS
        <input type="checkbox" id="map" /> Kalbų žemėlapis
        <input type="checkbox" id="legend" /> Legenda
      </span>
    </div>
    <div id="line-button" class="esri-widget esri-widget--button
        esri-interactive" title="Draw polyline">
        <span class="esri-icon-polyline"></span>
      </div>
  </body>
</html>